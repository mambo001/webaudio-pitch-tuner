{"version":3,"sources":["contexts/AudioContext.js","libs/Helpers.js","App.js","libs/AutoCorrelate.js","index.js"],"names":["audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","fftSize","getAudioContext","getAnalyser","resetAnalyser","decodeAudioData","audioData","then","decodedData","centsOffFromPitch","frequency","note","Math","floor","log","pow","frequencyFromNoteNumber","getDetunePercent","detune","analyserNode","buf","Float32Array","noteStrings","App","useState","source","setSource","started","setStart","pitchNote","setPitchNote","pitchScale","setPitchScale","pitch","setPitch","setDetune","notification","setNotification","useEffect","connect","setInterval","time","getFloatTimeDomainData","ac","sampleRate","SIZE","length","rms","i","val","sqrt","r1","r2","abs","slice","c","Array","fill","j","d","maxval","maxpos","T0","x1","x2","x3","a","autoCorrelate","noteNum","round","noteFromPitch","sym","scl","dtune","parseFloat","toFixed","console","start","getMicInput","input","state","resume","setTimeout","createMediaStreamSource","navigator","mediaDevices","getUserMedia","audio","echoCancellation","autoGainControl","noiseSuppression","latency","className","style","width","onClick","disconnect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83aef13e.chunk.js","sourcesContent":["const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\nlet analyser = audioCtx.createAnalyser();\r\nanalyser.fftSize = 2048;\r\n\r\nconst AudioContext = {\r\n  getAudioContext() {\r\n    return audioCtx;\r\n  },\r\n\r\n  getAnalyser() {\r\n    return analyser;\r\n  },\r\n\r\n  resetAnalyser() {\r\n    analyser = audioCtx.createAnalyser();\r\n  },\r\n\r\n  decodeAudioData(audioData) {\r\n    audioCtx.decodeAudioData(audioData).then(function (decodedData) {\r\n      // use the decoded data here\r\n    });\r\n  },\r\n};\r\n\r\nexport default AudioContext;\r\n","const noteFromPitch = (frequency) => {\r\n  var noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));\r\n  return Math.round(noteNum) + 69;\r\n};\r\n\r\nconst frequencyFromNoteNumber = (note) => {\r\n  return 440 * Math.pow(2, (note - 69) / 12);\r\n};\r\n\r\nconst centsOffFromPitch = (frequency, note) => {\r\n  return Math.floor(\r\n    (1200 * Math.log(frequency / frequencyFromNoteNumber(note))) / Math.log(2)\r\n  );\r\n};\r\n\r\nconst getDetunePercent = (detune) => {\r\n  if (detune > 0) {\r\n    return 50 + detune;\r\n  } else {\r\n    return 50 + -detune;\r\n  }\r\n};\r\n\r\nexport { noteFromPitch, centsOffFromPitch, getDetunePercent };\r\n","import { useEffect, useState } from \"react\";\r\nimport AudioContext from \"./contexts/AudioContext\";\r\nimport autoCorrelate from \"./libs/AutoCorrelate\";\r\nimport {\r\n  noteFromPitch,\r\n  centsOffFromPitch,\r\n  getDetunePercent,\r\n} from \"./libs/Helpers\";\r\n\r\nconst audioCtx = AudioContext.getAudioContext();\r\nconst analyserNode = AudioContext.getAnalyser();\r\nconst buflen = 2048;\r\nlet buf = new Float32Array(buflen);\r\n\r\nconst noteStrings = [\r\n  \"C\",\r\n  \"C#\",\r\n  \"D\",\r\n  \"D#\",\r\n  \"E\",\r\n  \"F\",\r\n  \"F#\",\r\n  \"G\",\r\n  \"G#\",\r\n  \"A\",\r\n  \"A#\",\r\n  \"B\",\r\n];\r\n\r\nfunction App() {\r\n  const [source, setSource] = useState(null);\r\n  const [started, setStart] = useState(false);\r\n  const [pitchNote, setPitchNote] = useState(\"C\");\r\n  const [pitchScale, setPitchScale] = useState(\"4\");\r\n  const [pitch, setPitch] = useState(\"0 Hz\");\r\n  const [detune, setDetune] = useState(\"0\");\r\n  const [notification, setNotification] = useState(false);\r\n\r\n  const updatePitch = (time) => {\r\n    analyserNode.getFloatTimeDomainData(buf);\r\n    let ac = autoCorrelate(buf, audioCtx.sampleRate);\r\n    if (ac > -1) {\r\n      let note = noteFromPitch(ac);\r\n      let sym = noteStrings[note % 12];\r\n      let scl = Math.floor(note / 12) - 1;\r\n      let dtune = centsOffFromPitch(ac, note);\r\n      setPitch(parseFloat(ac).toFixed(2) + \" Hz\");\r\n      setPitchNote(sym);\r\n      setPitchScale(scl);\r\n      setDetune(dtune);\r\n      setNotification(false);\r\n      console.log(note, sym, scl, dtune, ac);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (source != null) {\r\n      source.connect(analyserNode);\r\n    }\r\n  }, [source]);\r\n\r\n  setInterval(updatePitch, 1);\r\n\r\n  const start = async () => {\r\n    const input = await getMicInput();\r\n\r\n    if (audioCtx.state === \"suspended\") {\r\n      await audioCtx.resume();\r\n    }\r\n    setStart(true);\r\n    setNotification(true);\r\n    setTimeout(() => setNotification(false), 5000);\r\n    setSource(audioCtx.createMediaStreamSource(input));\r\n  };\r\n\r\n  const stop = () => {\r\n    source.disconnect(analyserNode);\r\n    setStart(false);\r\n  };\r\n\r\n  const getMicInput = () => {\r\n    return navigator.mediaDevices.getUserMedia({\r\n      audio: {\r\n        echoCancellation: true,\r\n        autoGainControl: false,\r\n        noiseSuppression: false,\r\n        latency: 0,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center h-screen\">\r\n      <div\r\n        className={\r\n          notification\r\n            ? \"visible transition-all fixed top-0 bg-gray-400 text-white w-10/12 text-xs md:text-sm text-center py-4 mt-2 rounded-full shadow-2xl\"\r\n            : \"invisible fixed top-0\"\r\n        }\r\n      >\r\n        Please, bring your instrument near to the microphone!\r\n      </div>\r\n      <div className=\"flex flex-col items-center\">\r\n        <div\r\n          className={\r\n            started\r\n              ? \"visible flex flex-col transition-all ease-in delay-75 bg-gray-200 justify-center items-center p-10 rounded-xl shadow-lg mb-5 w-60 h-60\"\r\n              : \"invisible transition-all w-0 h-0\"\r\n          }\r\n        >\r\n          <div className=\"flex items-start font-mono\">\r\n            <span\r\n              className={\r\n                started\r\n                  ? \"visible transition-all delay-75 font-thin text-9xl\"\r\n                  : \"invisible text-xs\"\r\n              }\r\n            >\r\n              {pitchNote}\r\n            </span>\r\n            <span className=\"bg-green-600 p-1 px-2 text-white rounded-lg\">\r\n              {pitchScale}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"w-full flex justify-center items-center\">\r\n            <div\r\n              className=\"bg-gradient-to-r to-green-400 from-red-600 py-1 rounded-full rotate-180\"\r\n              style={{\r\n                width: (detune < 0 ? getDetunePercent(detune) : \"50\") + \"%\",\r\n              }}\r\n            ></div>\r\n            <span className=\"font-bold text-lg text-green-800\">I</span>\r\n            <div\r\n              className=\"bg-gradient-to-r from-green-400 to-red-600 py-1 rounded-full\"\r\n              style={{\r\n                width: (detune > 0 ? getDetunePercent(detune) : \"50\") + \"%\",\r\n              }}\r\n            ></div>\r\n          </div>\r\n          <div className=\"mt-2 text-xs text-gray-400\">\r\n            <span>{pitch}</span>\r\n          </div>\r\n        </div>\r\n        {!started ? (\r\n          <button\r\n            className=\"bg-red-600 text-white w-20 h-20 rounded-full shadow-xl transition-all\"\r\n            onClick={start}\r\n          >\r\n            Start\r\n          </button>\r\n        ) : (\r\n          <button\r\n            className=\"bg-red-800 text-white w-20 h-20 rounded-full shadow-xl transition-all\"\r\n            onClick={stop}\r\n          >\r\n            Stop\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","export default function autoCorrelate(buf, sampleRate) {\r\n  var SIZE = buf.length;\r\n  var rms = 0;\r\n\r\n  for (let i = 0; i < SIZE; i++) {\r\n    var val = buf[i];\r\n    rms += val * val;\r\n  }\r\n  rms = Math.sqrt(rms / SIZE);\r\n  if (rms < 0.01)\r\n    // not enough signal\r\n    return -1;\r\n\r\n  var r1 = 0,\r\n    r2 = SIZE - 1,\r\n    thres = 0.2;\r\n  for (let i = 0; i < SIZE / 2; i++)\r\n    if (Math.abs(buf[i]) < thres) {\r\n      r1 = i;\r\n      break;\r\n    }\r\n  for (let i = 1; i < SIZE / 2; i++)\r\n    if (Math.abs(buf[SIZE - i]) < thres) {\r\n      r2 = SIZE - i;\r\n      break;\r\n    }\r\n\r\n  buf = buf.slice(r1, r2);\r\n  SIZE = buf.length;\r\n\r\n  var c = new Array(SIZE).fill(0);\r\n  for (let i = 0; i < SIZE; i++)\r\n    for (var j = 0; j < SIZE - i; j++) c[i] = c[i] + buf[j] * buf[j + i];\r\n\r\n  var d = 0;\r\n  while (c[d] > c[d + 1]) d++;\r\n  var maxval = -1,\r\n    maxpos = -1;\r\n  for (let i = d; i < SIZE; i++) {\r\n    if (c[i] > maxval) {\r\n      maxval = c[i];\r\n      maxpos = i;\r\n    }\r\n  }\r\n  var T0 = maxpos;\r\n\r\n  var x1 = c[T0 - 1],\r\n    x2 = c[T0],\r\n    x3 = c[T0 + 1];\r\n  var a = (x1 + x3 - 2 * x2) / 2;\r\n  var b = (x3 - x1) / 2;\r\n  if (a) T0 = T0 - b / (2 * a);\r\n\r\n  return sampleRate / T0;\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}